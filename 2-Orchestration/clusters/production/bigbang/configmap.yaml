domain: prod.kellerhome.us

istio:
  git:
    repo: https://repo1.dso.mil/platform-one/big-bang/apps/core/istio-controlplane.git
    tag: "1.17.1-bb.0"
    path: "./chart"
  enabled: true

istiooperator:
  git:
    repo: https://repo1.dso.mil/platform-one/big-bang/apps/core/istio-operator.git
    tag: "1.17.1-bb.0"
    path: "./chart"
  enabled: true

monitoring:
  git:
    repo: https://repo1.dso.mil/platform-one/big-bang/apps/core/monitoring.git
    tag: "43.1.2-bb.4"
    path: "./chart"
  enabled: true

loki:
  git:
    repo: https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/loki.git
    tag: "4.8.0-bb.2"
    path: "./chart"
  enabled: true
  strategy: monolith

promtail:
  git:
    repo: https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/promtail.git
    tag: "6.8.1-bb.2"
    path: "./chart"
  enabled: true

kyverno:
  git:
    repo: https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/kyverno.git
    tag: "2.6.5-bb.3"
    path: "./chart"
  enabled: true

kyvernopolicies:
  git:
    repo: https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/kyverno-policies.git
    tag: "1.1.0-bb.4"
    path: "./chart"
  enabled: true
  values:
    resources:
        limits:
          memory: 1024Mi
        requests:
          memory: 1024Mi
    policies:
      restrict-image-registries:
        exclude:
            any:
            - resources:
                namespaces:
                - longhorn
                - nextcloud
        validationFailureAction: audit
        parameters:
          allow:
          - registry1.dso.mil
          - nextcloud
          - bitnami
          - docker.io
          - registry.k8s.io
          - cgr.dev

      disallow-image-tags:
        exclude:
            any:
            - resources:  
                namespaces:
                - valheim
                - wger

      disallow-shared-subpath-volume-writes:
        exclude:
            any:
            - resources:
                namespaces:
                - valheim

      disallow-privileged-containers:
        exclude:
            any:
            - resources:
                namespaces:
                - longhorn

      disallow-host-namespaces:
        exclude:
            any:
            - resources:
                namespaces:
                - longhorn

      disallow-privilege-escalation:
        exclude:
            any:
            - resources:
                namespaces:
                - longhorn

      require-non-root-group:
        exclude:
            any:
            - resources:
                namespaces:
                - longhorn
                - nextcloud

      require-non-root-user:
        exclude:
            any:
            - resources:
                namespaces:
                - longhorn
                - nextcloud
      
      # restrict-host-path-mount:
      #   exclude:
      #       any:
      #       - resources:
      #           namespaces:
      #           - openebs

      restrict-host-path-write:
        exclude:
            any:
            - resources:
                namespaces:
                - longhorn
                - nextcloud

      restrict-volume-types:
        exclude:
            any:
            - resources:
                namespaces:
                - nfs
                - longhorn

neuvector:
  git:
    repo: https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/neuvector.git
    tag: "2.4.2-bb.5"
    path: "./chart"
  enabled: true
  values:
    k3s:
      enabled: true


addons:
  metricsServer:
    git:
      repo: https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/metrics-server.git
      tag: "3.8.4-bb.0"
      path: "./chart"
    enabled: true

helmRepositories:
  - name: "bitnami"
    repository: "oci://registry-1.docker.io/bitnamicharts"
    existingSecret: ""
    username: ""
    password: ""
    email: ""


wrapper:
  git:
    repo: https://repo1.dso.mil/big-bang/product/packages/wrapper.git
    tag: "0.4.0"
    path: "./chart"

packages:
  podinfo:
    enabled: true
    wrapper:
      enabled: true
    git:
      repo: https://github.com/stefanprodan/podinfo.git
      tag: 6.3.4
      path: charts/podinfo
    istio:
      hosts:
        - domain: "k8s.kellerhome.us"
          names:
            - podinfo
          gateways:
            - exposed
          destination:
            port: 9898
  renovate:
    git:
      repo: https://repo1.dso.mil/big-bang/product/packages/renovate.git
      tag: "34.120.0-bb.0"
      path: "./chart"
    enabled: true
    wrapper:
      enabled: false
    values:
      networkPolicies:
        enabled: "{{ $.Values.networkPolicies.enabled }}"
      istio:
        enabled: "{{ $.Values.istio.enabled }}"
      cronjob:
        schedule: '0 7 * * *'
  nextcloud:
    git:
      repo: https://github.com/nextcloud/helm.git
      tag: "nextcloud-3.5.4"
      path: "./charts/nextcloud"
    enabled: true
    wrapper:
      enabled: true
    network:
      policies: false
    istio:
      injection: false
      hosts:
        - names:
            - cloud
          gateways:
            - public
          destination:
            service: nextcloud
            port: 8080
    values:
      nextcloud:
        host: cloud.prod.kellerhome.us
        configs:
          domains.config.php: |-
            <?php
            $CONFIG = array (
              'trusted_domains' =>
                array (
                0 => 'localhost',
                1 => 'cloud.prod.kellerhome.us',
                )
            );
          overwrite.config.php: |-
            <?php
            $CONFIG = array (
              'overwriteprotocol' => 'https',
            );
      livenessProbe:
        enabled: true
        initialDelaySeconds: 15
        periodSeconds: 30
        timeoutSeconds: 10
        failureThreshold: 5
        successThreshold: 1
      readinessProbe:
        enabled: true
        initialDelaySeconds: 10
        periodSeconds: 25
        timeoutSeconds: 10
        failureThreshold: 5
        successThreshold: 1
      redis:
        enabled: true
      
      postgresql:
        enabled: true
        primary:
          persistence:
            enabled: true

      internalDatabase:
        enabled: false

      externalDatabase:
        enabled: true

        ## Supported database engines: mysql or postgresql
        type: postgresql

        ## Database name
        database: nextcloud

      persistence:
        enabled: true
        accessMode: ReadWriteOnce
        size: 10Gi

        nextcloudData:
          enabled: true
          storageClass: "nfs-client"
          accessMode: ReadWriteOnce
          size: 400Gi

  proxy:
    enabled: false
    wrapper:
      enabled: true
    helmRepo:
      repoName: "bitnami"
      chartName: "nginx"
      tag: "13.2.33"
    values:
      image:
        registry: cgr.dev
        repository: chainguard/nginx
        tag: "1.23.4"
      containerPorts:
        http: 80
        https: 443
      service:
        type: ClusterIP
      # TODO: map the configmap from wrapper to a volume/volumeMount  
      extraVolumes: []
      extraVolumeMounts: []
    configMaps:
    - name: proxy-conf
      data:
        nginx.conf: |
          user  nginx;
          worker_processes  1;

          error_log  /var/log/nginx/error.log warn;
          pid        /var/run/nginx.pid;


          events {
              worker_connections  1024;
          }


          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;

              log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';

              access_log  /var/log/nginx/access.log  main;

              sendfile        on;
              #tcp_nopush     on;

              keepalive_timeout  65;

              map "$host:$server_port" $namehttp {
                  hostnames;

                  *.prod.kellerhome.us:80 prod_http;
                  *.k8s.kellerhome.us:80 k8s_http;
                  *.missionfocused.dev:80 mission_http;
              }

              upstream prod_http {
                  server 192.168.1.22:80 max_fails=3 fail_timeout=10s;
              }

              upstream k8s_http {
                  server 192.168.1.21:80 max_fails=3 fail_timeout=10s;
              }

              upstream mission_http {
                  server 192.168.1.22:80 max_fails=3 fail_timeout=10s;
              }

              log_format stream_http_routing '$remote_addr [$time_local] '
                                    'with SNI name "$host" '
                                    'on port "$server_port"'
                                    'combined is "$host:$server_port"'
                                    'proxying to "$namehttp" ';

              server {
                  listen 80;
                  location / {
                      proxy_pass http://$namehttp;
                  }
                  access_log /var/log/nginx/http_stream.log stream_http_routing;
              }

          }
          stream {

              map "$ssl_preread_server_name:$server_port" $namehttps {
                  hostnames;
                  
                  *.prod.kellerhome.us:443 prod_https;
                  *.k8s.kellerhome.us:443 k8s_https;
                  *.missionfocused.dev:443 mission_https;
                  #default https_default_backend;
              }

              upstream prod_https {
                  server 192.168.1.22:443 max_fails=3 fail_timeout=10s;
              }

              upstream k8s_https {
                  server 192.168.1.21:443 max_fails=3 fail_timeout=10s;
              }

              upstream mission_https {
                  server 192.168.1.22:443 max_fails=3 fail_timeout=10s;
              }

              log_format stream_https_routing '$remote_addr [$time_local] '
                                    'with SNI name "$ssl_preread_server_name" '
                                    'on port "$server_port"'
                                    'combined is "$ssl_preread_server_name:$server_port"'
                                    'proxying to "$namehttps" '
                                    '$protocol $status $bytes_sent $bytes_received '
                                    '$session_time';
              
              server {
                  listen 443;
                  proxy_pass $namehttps;
                  ssl_preread on;
                  access_log /var/log/nginx/stream.log stream_https_routing;
              }
          }
    